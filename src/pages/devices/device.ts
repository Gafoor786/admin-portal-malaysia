// Generated by https://quicktype.io

import { GraphType } from "./add-sensors";

export interface SensorFormProps {
    key: string;
    name: string;
    unit: string;
    min: string;
    max: string;
    graphType: GraphType,
    icon: string;
    priority: number | undefined;
    dashboardSelected: boolean | undefined;
    id: string;
}

export interface ExistingSensorFormProps extends SensorFormProps {
    sensorId: string;
}


export interface EventFormProps {
    key: string;
    name: string;
    enumObj: IEnumData;
    enumsStr: string;
    id: string;
}

export interface ExistingEventFormProps extends EventFormProps {
    eventId: string;
}

export interface DeviceDataSection {
    deviceData: DeviceRawConfig[]
}

export interface DeviceRawConfig {
    id: string;
    token: string;
    dts?: string;
    env: string;
    status: number;
    data: any;
    otherData?: any;
    event?: any;
}


export interface DeviceProps {
    name: string;
    imagePath: string | null;
    description: string;
    deviceImage: File | null;
    existingSensors: ExistingSensorFormProps[];
    existingEvents: ExistingEventFormProps[],
    isEditMode: boolean;
    sensorsForm: SensorFormProps[],
    eventsForm: EventFormProps[],
    rawConfig: DeviceDataSection | null,
    chooseSensors: IChooseSensors[];
    themeId: number;
    facilityId: string;
    deviceId: string;
    next: Function,
    back: Function,
    reset: Function
}

export interface IChooseSensors {
    key: string;
    displayName: string;
    priority: number;
    selected: boolean;
}

export type IEnumData = { [key: string]: string }


export interface SensorEvents {
    key: string;
    enumsObj: IEnumData
}

export const initialDeviceProps: DeviceProps = {
    name: '',
    imagePath: null,
    description: '',
    deviceImage: null,
    rawConfig: null,
    existingEvents: [],
    existingSensors: [],
    isEditMode: false,
    sensorsForm: [],
    eventsForm: [],
    chooseSensors: [],
    themeId: 0,
    facilityId: '',
    deviceId: '',
    next: () => { },
    back: () => { },
    reset: () => { },
}

export type IDevieRawData = { [key: string]: number | IDevieRawData }
export function flattenObject(oldObject: any) {
    const newObject = {};

    flattenHelper(oldObject, newObject, '');

    return newObject;

    function flattenHelper(currentObject: IDevieRawData, newObject: IDevieRawData, previousKeyName: string | null) {
        for (let key in currentObject) {
            let value = currentObject[key];
            if (value.constructor !== Object) {
                if (previousKeyName == null || previousKeyName === '') {
                    newObject[key] = value;
                } else {
                    if (key == null || key === '') {
                        newObject[previousKeyName] = value;
                    } else {
                        newObject[previousKeyName + '.' + key] = value;
                    }
                }
            } else {
                if (previousKeyName == null || previousKeyName === '') {
                    flattenHelper(value as IDevieRawData, newObject, key);
                } else {
                    flattenHelper(value as IDevieRawData, newObject, previousKeyName + '.' + key);
                }
            }
        }
    }
}

export function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

